#version 450
#extension GL_GOOGLE_include_directive : require

// https://www.reddit.com/r/vulkan/comments/cabask/set_localsize_dynamically/
layout(local_size_x = 16, local_size_y = 16) in;
// layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D result_image;


#define PER_FRAME_SET 1

#define PER_FRAME_VOXEL_OBJECTS 0
#define PER_FRAME_VOXEL_DATA 1
#define PER_FRAME_UNIFORM 2

#define DRAW_MODE_LIT 0
#define DRAW_MODE_TOON 1
#define DRAW_MODE_ALBEDO 2
#define DRAW_MODE_NORMALS 3
#define DRAW_MODE_DEPTH 4

// There used to be others, and maybe some new ones will be tried, but now there is one only
#define DRAW_METHOD_CHUNKTREE 0

#define DRAW_FLAGS_RENDER_BOUNDS 1
#define DRAW_FLAGS_WIRE_CUBES 2

struct CameraData
{
	mat4 view;
	vec4 max_distance_X_field_of_view_Y;
};

struct DrawOptions
{
	ivec4 draw_options; // x: DRAW_MODE_, y: DRAW_METHOD_, z: draw_flags
	vec4 debug_options;
};

struct VoxelSettings
{	
	// transforms are scale transforms and are same for every range
	vec4 space_transforms;	// x: WS_to_VS, y: VS_to_WS, z: WS_to_CS, w: CS_to_WS
	ivec4 voxels_in_chunk;
};

struct LightingData
{
	vec4 direct_direction;
	vec4 direct_color;
	vec4 ambient_color;	
};

struct DrawWireCubeData
{
	ivec4 count;
	vec4 mins[20];
	vec4 maxs[20];
};

layout(set = PER_FRAME_SET, binding = PER_FRAME_UNIFORM) uniform PerFrame
{
	CameraData 			camera_data;
	DrawOptions 		draw_options;
	VoxelSettings  		voxel_settings;
	LightingData 		lighting;
	DrawWireCubeData 	draw_wire_cube_data;
} per_frame;

float get_max_distance()
{
	return per_frame.camera_data.max_distance_X_field_of_view_Y.x;
}	

float get_field_of_view()
{
	return per_frame.camera_data.max_distance_X_field_of_view_Y.y;
}

float get_smoothness()
{
	return clamp(per_frame.draw_options.debug_options.x, 0, 1);
}

float get_specular_strength()
{
	return clamp(per_frame.draw_options.debug_options.w, 0, 1);
}

float get_bounce_ray_length()
{
	return per_frame.draw_options.debug_options.y;
}

float get_normal_offset()
{
	return per_frame.draw_options.debug_options.z;
}

int get_draw_mode()
{
	return per_frame.draw_options.draw_options.x;
}

int get_draw_method()
{
	return per_frame.draw_options.draw_options.y;
}

bool get_draw_render_bounds()
{
	return (per_frame.draw_options.draw_options.z & DRAW_FLAGS_RENDER_BOUNDS) != 0;
}

bool get_draw_wire_cubes()
{
	return (per_frame.draw_options.draw_options.z & DRAW_FLAGS_WIRE_CUBES) != 0;
}

#include "raycast.glsl"
#include "chunktree.glsl"
#include "debug.glsl"

Ray get_camera_ray()
{
	vec2 resolution = vec2(imageSize(result_image));
	vec2 uv = gl_GlobalInvocationID.xy / resolution;
	uv = uv * 2 - 1;
	uv.x *= resolution.x / resolution.y;

	Ray ray;
	ray.origin = (per_frame.camera_data.view * vec4(0,0,0,1)).xyz;
	
	ray.direction = normalize(vec3(uv, get_field_of_view()));
	ray.direction = (per_frame.camera_data.view * vec4(ray.direction, 0)).xyz;

	ray.inverse_direction = 1.0 / ray.direction;

	// ray.sign = ivec3(mix(sign(ray.direction), vec3(0,0,0), vec3(1,1,1)));

	return ray;
}

// vec3 blend(vec4 source, vec3 destination)
// {
// 	float src_alpha 			= clamp(source.a, 0, 1);
// 	float one_minus_src_alpha 	= 1.0 - src_alpha;
// 	return src_alpha * source.rgb + one_minus_src_alpha * destination.rgb;
// }

bool draw_bounds_2(Ray ray, int map_index)
{
	// This is wasteful way of doing this. Either do separate compute shader, or actual grpahics pipeline with lines
	vec3 chunk_range_bounds_min = voxel_objects[map_index].offset_in_voxels.xyz * get_VS_to_WS();
	vec3 chunk_range_bounds_max = chunk_range_bounds_min + voxel_objects[map_index].size_in_chunks.xyz * get_CS_to_WS();
	return draw_bounds(ray, chunk_range_bounds_min, chunk_range_bounds_max);
}

void main()
{

	Ray camera_ray = get_camera_ray();

	vec3 background_color;
	vec3 sea_color = vec3(0.1, 0.3, 0.5);
	vec3 air_color;
	{
		vec3 dir = camera_ray.direction;


		background_color = mix(dir, vec3(1,1,1), 0.7);
		air_color = mix(-dir, vec3(1,1,1), 0.7);
		// float avg_value = (dir.x + dir.y + dir.z) / 3 / 2 + 0.5;
		// // float avg_value = max(max(camera_ray.direction.x, camera_ray.direction.y), camera_ray.direction.z) / 2 + 0.5;
		// avg_value = smoothstep(0,1, avg_value);
		// avg_value = avg_value * 0.6 + 0.4;
		// background_color = mix(background_color, vec3(avg_value, avg_value, avg_value), 0.6);

		background_color = mix(sea_color, background_color, step(-0.15, dir.y));

		// background_color = mix(sea_color, background_color, smoothstep(-0.15, -0.1, dir.y));

		// if (dir.y < -0.15)
		// {
		// 	// sea
		// 	background_color = sea_color;
		// }
	}
	vec3 color = background_color;
	// color = vec3(0,0,0);

	// ------------------------------------------------
	float max_distance = get_max_distance();

	vec4 ray_color;
	float ray_depth = 1;

	for (int i = 0; i < get_voxel_map_count(); i++)
	{
		float current_depth = 1;
		vec4 current_color = traverse_voxels(camera_ray, max_distance, i, current_depth);

		if (current_depth <= ray_depth)
		{
			ray_color = current_color;
			ray_depth = current_depth;
		}
	}

	vec4 ray_result_color = ray_color;
	float depth = ray_depth;

	if (depth < 1)
	{
		color = mix(ray_result_color.rgb, air_color, depth);
	}
	
	if (get_draw_render_bounds())
	{
		// This is wasteful way of doing this. Either do separate compute shader, or actual grpahics pipeline with lines
		for (int i = 0; i < get_voxel_map_count(); i++)
		{
			if (draw_bounds_2(camera_ray, i))
			{
				color = vec3(1.0, 0.8, 0.1);
				if (i == 4)
				{
					color = vec3(1, 0, 1);
				}
			}
		}
	}

	if (get_draw_wire_cubes())
	{
		for (int i = 0; i < per_frame.draw_wire_cube_data.count.x; i++)
		{
			if (draw_bounds(camera_ray, per_frame.draw_wire_cube_data.mins[i].xyz, per_frame.draw_wire_cube_data.maxs[i].xyz))
			{
				color = vec3(0.4, 0.1, 0.9);
			}
		}
	}

	// color = vec3(depth, depth, depth);
	vec4 result = vec4(color, 1);    

	ivec2 store_position = ivec2(gl_GlobalInvocationID.xy);
	store_position.y = imageSize(result_image).y - store_position.y;
	imageStore(result_image, store_position, result);
}

